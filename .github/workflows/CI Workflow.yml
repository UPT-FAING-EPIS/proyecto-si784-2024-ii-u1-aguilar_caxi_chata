name: CI Workflow

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  # Job 1: Análisis de SonarCloud
  sonarcloud:
    name: SonarCloud Analysis
    runs-on: windows-latest
    steps:
      - name: Enable long paths in Git
        run: git config --system core.longpaths true
        
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          path: './repo'  

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1  

      - name: Restore NuGet packages
        run: nuget restore ./repo/Proyecto_RUMI/Proyecto_Web2_Aguilar_Chino_Gonzales_Perez.sln  

      - name: Install SonarCloud Scanner
        run: dotnet tool install --global dotnet-sonarscanner

      - name: Run SonarCloud Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet sonarscanner begin /k:"luis-caxi-calani_calidadrumi" /o:"luis-caxi-calani" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
          msbuild ./repo/Proyecto_RUMI/Proyecto_Web2_Aguilar_Chino_Gonzales_Perez.sln /p:Configuration=Release
          dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

  # Job 2: Análisis de Semgrep
  semgrep:
    name: Semgrep Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          path: './repo'

      - name: Restore NuGet packages
        run: nuget restore ./repo/Proyecto_RUMI/Proyecto_Web2_Aguilar_Chino_Gonzales_Perez.sln

      - name: Set up Semgrep using Docker
        run: docker pull semgrep/semgrep

      - name: Run Semgrep scan
        run: docker run --rm -v $(pwd):/src semgrep/semgrep semgrep scan --config="p/default" --json --output semgrep.json --metrics=off

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install prospector-html
        run: python -m pip install prospector2html

      - name: Convert Semgrep results to HTML
        run: prospector-html --input semgrep.json --output semgrep-report.html --filter semgrep || true

      - name: Upload Semgrep report as artifact
        uses: actions/upload-artifact@v3
        with:
          name: semgrep-report
          path: semgrep-report.html

  # Job 3: Análisis de Snyk
  snyk:
    name: Snyk Vulnerability Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          path: './repo'

      - name: Restore NuGet packages
        run: nuget restore ./repo/Proyecto_RUMI/Proyecto_Web2_Aguilar_Chino_Gonzales_Perez.sln

      - name: Install Snyk and snyk-to-html
        run: |
          npm install -g snyk snyk-to-html

      - name: Run Snyk to check for vulnerabilities
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: snyk code test --json | snyk-to-html -o snyk-report.html

      - name: Upload Snyk report as artifact
        uses: actions/upload-artifact@v3
        with:
          name: snyk-report
          path: snyk-report.html

  # Job 4: Build & Publish (dependiente de los análisis anteriores)
  build_and_publish:
    name: Build & Publish
    runs-on: windows-latest
    needs: [sonarcloud, semgrep, snyk]
    steps:
      # 1. Habilitar rutas largas en Git antes del Checkout
      - name: Enable long paths in Git
        run: git config --system core.longpaths true
  
      # 2. Checkout del repositorio
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          path: './repo'
  
      # 3. Instalar MSBuild (para usar Visual Studio)
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1
  
      # 4. Restaurar paquetes NuGet
      - name: Restore NuGet packages
        run: nuget restore ./repo/Proyecto_RUMI/Proyecto_Web2_Aguilar_Chino_Gonzales_Perez.sln
  
      # 5. Compilar el proyecto con MSBuild (no usar dotnet)
      - name: Build project with MSBuild
        run: msbuild ./repo/Proyecto_RUMI/Proyecto_Web2_Aguilar_Chino_Gonzales_Perez/Proyecto_Web2_Aguilar_Chino_Gonzales_Perez.csproj /t:Pack /p:Configuration=Release
  
      # 6. Empaquetar el proyecto para NuGet (con MSBuild, no dotnet pack)
      - name: Pack NuGet Package
        run: msbuild ./repo/Proyecto_RUMI/Proyecto_Web2_Aguilar_Chino_Gonzales_Perez.csproj /t:Pack /p:Configuration=Release
  
      # 7. Publicar el paquete en NuGet (asegúrate de tener un API key válido)
      - name: Publish NuGet Package
        run: |
          dotnet nuget push ./repo/**/bin/Release/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
  

