# This workflow will build and push a .NET Core app to an Azure Web App when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/en-us/azure/app-service/quickstart-dotnetcore?tabs=net60&pivots=development-environment-vscode
#
# To configure this workflow:
#
# 1. Download the Publish Profile for your Azure Web App. You can download this file from the Overview page of your Web App in the Azure Portal.
#    For more information: https://docs.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials
#
# 2. Create a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE, paste the publish profile contents as the value of the secret.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 3. Change the value for the AZURE_WEBAPP_NAME. Optionally, change the AZURE_WEBAPP_PACKAGE_PATH and DOTNET_VERSION environment variables below.
#
# For more information on GitHub Actions for Azure: https://github.com/Azure/Actions
# For more information on the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples

name: Deploy ASP.NET App to Azure Web App via FTP

on:
  push:
    branches:
      - main  # Reemplaza con la rama que deseas utilizar para el despliegue

jobs:
  build-and-deploy:
    runs-on: windows-latest

    steps:
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@v2

    - name: Setup NuGet
      uses: NuGet/setup-nuget@v1  # Instala NuGet para restaurar paquetes

    - name: 'Restore NuGet packages'
      run: nuget restore Proyecto_RUMI/Proyecto_Web2_Aguilar_Chino_Gonzales_Perez.sln  # Asegúrate de que esta sea la ruta correcta del archivo .sln

    - name: 'Install .NET Framework Build Tools'
      shell: pwsh
      run: |
        choco install visualstudio2019buildtools --include-optional --package-parameters "--add Microsoft.VisualStudio.Workload.ManagedDesktopBuildTools --add Microsoft.VisualStudio.Workload.VCTools --add Microsoft.VisualStudio.Component.VC.14.29.x86.x64 --add Microsoft.VisualStudio.Component.Windows10SDK.19041 --add Microsoft.Component.MSBuild" -y

    - name: 'Setup MSBuild'
      uses: microsoft/setup-msbuild@v1.0.2  # Configura MSBuild
      with:
        vs-version: 2019  # Utiliza la versión de Visual Studio 2019 compatible con .NET Framework 4.8

    - name: 'Build with MSBuild'
      run: msbuild Proyecto_RUMI/Proyecto_Web2_Aguilar_Chino_Gonzales_Perez.sln /p:Configuration=Release

    - name: 'Publish Web App'
      run: msbuild Proyecto_RUMI/Proyecto_Web2_Aguilar_Chino_Gonzales_Perez/Proyecto_Web2_Aguilar_Chino_Gonzales_Perez.csproj /p:Configuration=Release /p:DeployOnBuild=true /p:WebPublishMethod=Package /p:DeleteExistingFiles=True /p:publishUrl=$(System.DefaultWorkingDirectory)/PublishOutput

    - name: 'Deploy to Azure WebApp via FTP'
      uses: SamKirkland/FTP-Deploy-Action@4.3.0  # Acción para realizar deploy con FTP
      with:
        ftp-server: "ftp://waws-prod-yt1-059.ftp.azurewebsites.windows.net/site/wwwroot"  # Reemplaza con la URL de tu servidor FTPS
        ftp-username: ${{ secrets.FTP_USERNAME }}  # Nombre de usuario de FTP configurado en GitHub Secrets
        ftp-password: ${{ secrets.FTP_PASSWORD }}  # Contraseña de FTP configurada en GitHub Secrets
        local-dir: '$(System.DefaultWorkingDirectory)/PublishOutput'  # Ruta de la carpeta local publicada
        git-ftp-args: "--insecure"
